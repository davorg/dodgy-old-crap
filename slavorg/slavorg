#!/usr/local/bin/perl -w
#
#  irctest
#     Sample Net::IRC script that starts a vapid little annoybot.
#     Please don't test your bots in #perl... we are easily annoyed.
#

use strict;
use Net::IRC;

$|++;

#
#  Create the IRC and Connection objects
#

my $irc = Net::IRC->new;

my $me = 'slavorg';

my $channel = shift || '#london.pm';
my $server = shift || 'scatha.rhizomatic.net';

my %trusted;

if (open TRUST, '.trust') {
  while (<TRUST>) {
    chomp;
    $trusted{$_} = 1;
  }
} else {
  warn "Can't open .trust: $!\n";
  $trusted{davorg} = 1;
}

print "Creating connection to IRC server...\n";

my $conn = $irc->newconn(Server   => $server,
			 Port     => 6667,
			 Nick     => $me,
			 Ircname  => 'Slav Org',
			 Username => $me)
    or die "irctest: Can't connect to IRC server.\n";

#
#  Here are the handler subroutines. Fascinating, huh?
#

# What to do when the bot successfully connects.
sub on_connect {
  my $self = shift;
	
  print "Joining $channel...\n";
  $self->join($channel);
  $self->privmsg($channel, 'Here I am. Did you miss me?');
  $self->topic($channel);
}

# Handles some messages you get when you connect
sub on_init {
  my ($self, $event) = @_;
  my (@args) = ($event->args);
  shift (@args);

  print scalar localtime, "*** @args\n";
}

# What to do when someone leaves a channel the bot is on.
sub on_part {
  my ($self, $event) = @_;
  my ($channel) = ($event->to)[0];

  printf scalar localtime, "*** %s has left channel %s\n", $event->nick, $channel;
}

# What to do when someone joins a channel the bot is on.
sub on_join {
  my ($self, $event) = @_;
  my ($channel) = ($event->to)[0];

  printf scalar localtime, "*** %s (%s) has joined channel %s\n",
    $event->nick, $event->userhost, $channel;

  if ($trusted{$event->nick}) {
    $self->privmsg($channel, "\cAACTION bows before " . $event->nick . "\cA");
    $self->mode($channel, "+o", $event->nick);
  }
}

# What to do when we receive a private PRIVMSG.
sub on_msg {
  my ($self, $event) = @_;
  my ($nick) = $event->nick;

  print scalar localtime, "*$nick*  ", ($event->args), "\n";
  $self->privmsg($nick, 'It\'s rude to whisper');
}

# What to do when we receive channel text.
sub on_public {
  my ($self, $event) = @_;
  my @to = $event->to;
  my ($nick, $mynick) = ($event->nick, $self->nick);
  my ($arg) = ($event->args);

  # Note that $event->to() returns a list (or arrayref, in scalar
  # context) of the message's recipients, since there can easily be
  # more than one.

  print scalar localtime, "*** $nick: $arg\n";

  if ($arg =~ /^$mynick,? trust (\w+)/i) {
    my $trustee = $1;
    $trustee = $nick if $trustee eq 'me';
    if ($trustee eq 'dadadodo') {
      $self->privmsg($channel, 'There\'s no way I\'m gonna trust that idiot!');
      return;
    }
    if ($trustee eq $mynick) {
      $self->privmsg($channel, 'Well, of course I trust myself!');
      return;
    }      
    if ($trusted{$nick}) {
      if ($trusted{$trustee}) {
	$self->privmsg($channel, "But I already trust $1");
      } else {
	$trusted{$trustee} = 1;
	open TRUST, '>>.trust';
	print TRUST "$1\n";
	close TRUST;
	$self->privmsg($channel, "OK, $nick");
	$self->mode($channel, "+o", $trustee);
      }
    } else {
      $self->privmsg($channel, "But I don't trust _you_, $nick");
    }
  }

  if ($arg =~ /Go away $mynick/i) {
    $self->quit('You\'re gonna miss me!');
    exit 0;
  }
}

# What to do when we receive a message via DCC CHAT.
sub on_chat {
  my ($self, $event) = @_;
  my ($sock) = ($event->to)[0];

  print '*' . $event->nick . '* ' . join(' ', $event->args), "\n";
  #$self->privmsg($sock, &pickrandom());   # Say a Zippy quote.
}

# Prints the names of people in a channel when we enter.
sub on_names {
  my ($self, $event) = @_;
  my (@list, $channel) = ($event->args);    # eat yer heart out, mjd!

  # splice() only works on real arrays. Sigh.
  ($channel, @list) = splice @list, 2;

  print "Users on $channel: @list\n";
}

# Yells about incoming CTCP PINGs.
sub on_ping {
  my ($self, $event) = @_;
  my $nick = $event->nick;

  $self->ctcp_reply($nick, join (' ', ($event->args)));
  print "*** CTCP PING request from $nick received\n";
}

# Gives lag results for outgoing PINGs.
sub on_ping_reply {
  my ($self, $event) = @_;
  my ($args) = ($event->args)[1];
  my ($nick) = $event->nick;

  $args = time - $args;
  print "*** CTCP PING reply from $nick: $args sec.\n";
}

# Change our nick if someone stole it.
sub on_nick_taken {
  my ($self) = shift;

  $self->nick(substr($self->nick, -1) . substr($self->nick, 0, 8));
}

# Display formatted CTCP ACTIONs.
sub on_action {
  my ($self, $event) = @_;
  my ($nick, @args) = ($event->nick, $event->args);

  print scalar localtime, "* $nick @args\n";
}

# Reconnect to the server when we die.
sub on_disconnect {
  my ($self, $event) = @_;

  print scalar localtime, "Disconnected from ", $event->from(), " (",
    ($event->args())[0], "). Attempting to reconnect...\n";
  $self->connect();
}

# Look at the topic for a channel you join.
sub on_topic {
  my ($self, $event) = @_;
  my @args = $event->args();

  # Note the use of the same handler sub for different events.

  if ($event->type() eq 'notopic') {
    print "No topic set for $args[1].\n";

    # If it's being done _to_ the channel, it's a topic change.
  } elsif ($event->type() eq 'topic' and $event->to()) {
    print "Topic change for ", $event->to(), ": $args[0]\n";

  } else {
    print "The topic for $args[1] is \"$args[2]\".\n";
  }
}


print "Installing handler routines...";

$conn->add_handler('cping',  \&on_ping);
$conn->add_handler('crping', \&on_ping_reply);
$conn->add_handler('msg',    \&on_msg);
$conn->add_handler('chat',   \&on_chat);
$conn->add_handler('public', \&on_public);
$conn->add_handler('caction', \&on_action);
$conn->add_handler('join',   \&on_join);
$conn->add_handler('part',   \&on_part);
$conn->add_handler('cdcc',   \&on_dcc);
$conn->add_handler('topic',   \&on_topic);
$conn->add_handler('notopic',   \&on_topic);

$conn->add_global_handler([ 251,252,253,254,302,255 ], \&on_init);
$conn->add_global_handler('disconnect', \&on_disconnect);
$conn->add_global_handler(376, \&on_connect);
$conn->add_global_handler(433, \&on_nick_taken);
$conn->add_global_handler(353, \&on_names);

print " done.\n";

print "starting...\n";
$irc->start;
